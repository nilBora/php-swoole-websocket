version: "3.7"

services:
#  swoole:
#    container_name: swool_wbsocket_php
#    build:
#      context: .
#    user: 1000:1000
#    volumes:
#      - ~/.composer/cache/:/.composer_cache/:rw
#      - .:/app:rw
#    working_dir: /app
#    restart: on-failure
#    command: '/app/bin/console swoole:server:run'
#    ports:
#      - 9501:9501
#      - 9200:9200

  nginx:
    container_name: ${APP_COMPOSE_PROJECT_NAME}_nginx
    image: nginx:alpine
    working_dir: /app
    volumes:
      - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./:/app
    ports:
      - 9504:80
      - 8080:8080

  php-fpm:
    container_name: ${APP_COMPOSE_PROJECT_NAME}_php_fpm
    build:
      context: .
    #image: brdnlsrg/baseimage:php8.0-full-dev
    env_file:
      - .env
    user: 1000:1000
    ports:
      - "9000:9003"
    environment:
      PHP_IDE_CONFIG: serverName=docker
    volumes:
      - ~/.composer/cache/:/.composer_cache/:rw
      - ./:/app:rw
    working_dir: /app

  swoole_ws:
    container_name: swool_ws_php
    build:
      context: .
    user: 1000:1000
    volumes:
      - ~/.composer/cache/:/.composer_cache/:rw
      - .:/app:rw
    working_dir: /app
    restart: on-failure
    command: '/app/server'
    ports:
      - 9502:9502

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    ports:
      - "9093:9093"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    volumes:
      - kafka_data:/var/lib/kafka
    depends_on:
      - zookeeper

#  tasks:
#    container_name: ${APP_COMPOSE_PROJECT_NAME}_tasks
#    build:
#      context: .
#    #image: brdnlsrg/baseimage:php8.0-full-dev
#    env_file:
#      - .env
#    user: 1000:1000
#    volumes:
#      - .:/app:rw
#    working_dir: /app
#    restart: on-failure
#    command: '/app/bin/console enqueue:consume -c task'

  queue-events:
    container_name: ${APP_COMPOSE_PROJECT_NAME}_queue_events
    build:
      context: .
    #image: brdnlsrg/baseimage:php8.0-full-dev
    env_file:
      - .env
    user: 1000:1000
    volumes:
      - .:/app:rw
    working_dir: /app
    restart: on-failure
    command: '/app/bin/console enqueue:consume -c queueevent'

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-13}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeMe}
      POSTGRES_USER: ${POSTGRES_USER:-symfony}
    volumes:
      - db-data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  kafka_data:

###> doctrine/doctrine-bundle ###
  db-data:
###< doctrine/doctrine-bundle ###
